from secrets import randbits

class DiffieHellman:
  def __init__(self):
    # Publically agreed base for Diffie-Hellman
    # Must be prime
    self.mod = 2**16+1
    self.exp1 = []
    self.exp2 = []
    self.common_secrets = []
    self.bases = []

  # Check if base is a generator of mod
  def __check_generator(self, base):
    return pow(base, (self.mod-1)//2, self.mod) != 1
  
  # Generate and return a new key
  # Save results within attributes
  def new_key(self):
    # Decided by data streamer
    # Must be a generator
    while True:
      # Must be odd
      base = randbits(15)*2+1
      if self.__check_generator(base):
        self.bases.append(base)
        break

    # Secret generated by streamer
    self.exp1.append(randbits(16))
    # Secret generated by receiver
    self.exp2.append(randbits(16))

    # Common secret key
    self.common_secrets.append(pow(self.bases[-1], self.exp1[-1] * self.exp2[-1], self.mod))
    self.common_secret = self.common_secrets[-1]
    return self.common_secret